#!/bin/bash

indent() {
  sed -u 's/^/       /'
}

echo "-----> Install ImageMagick"

BUILD_DIR=$1
CACHE_DIR=$2
VENDOR_DIR="$BUILD_DIR/vendor"
INSTALL_DIR="$VENDOR_DIR/imagemagick"
IMAGE_MAGICK_VERSION="${IMAGE_MAGICK_VERSION:-7.1.1-38}"
CACHE_FILE="$CACHE_DIR/imagemagick-$IMAGE_MAGICK_VERSION.tar.gz"
LIB_DE265_VERSION="${LIB_DE265_VERSION:-1.0.15}"
LIB_HEIF_VERSION="${LIB_HEIF_VERSION:-1.18.2}"
LIB_WEBP_VERSION="${LIB_WEBP_VERSION:-1.4.0}"

# build lib version base-url configure-options
build() {
  PRODUCT="$1"
  PRODUCT_VERSION="$2"
  PRODUCT_DIR="$PRODUCT-$PRODUCT_VERSION"
  PRODUCT_FILE="$PRODUCT_DIR.tar.gz"
  PRODUCT_URL="$3/$PRODUCT_FILE"
  CONFIGURE_ARGS="$4"
  CMAKE_ARGS="$5"

  echo "-----> Downloading $PRODUCT from $PRODUCT_URL"
  curl -L $PRODUCT_URL -o $BUILD_DIR/$PRODUCT_FILE | indent

  echo "-----> Extracting $PRODUCT from $BUILD_DIR/$PRODUCT_FILE"
  if [ ! -f $BUILD_DIR/$PRODUCT_FILE ]; then
    echo "Error: Unable to download $PRODUCT" | indent
    ls $BUILD_DIR | indent
    exit 1;
  fi
  tar xvf $BUILD_DIR/$PRODUCT_FILE | indent

  echo "-----> Building $PRODUCT"
  cd $PRODUCT_DIR
  export CPPFLAGS="-I$INSTALL_DIR/include"
  export LDFLAGS="-L$INSTALL_DIR/lib"
  export PKG_CONFIG_PATH="$INSTALL_DIR/lib/pkgconfig"

  # build via cmake
  if [ "$CMAKE_ARGS" != "" ]; then
    mkdir build
    cd build
    if cmake -DCMAKE_PREFIX_PATH=$INSTALL_DIR -DCMAKE_INSTALL_PREFIX=$INSTALL_DIR $CMAKE_ARGS; then
      echo "cmake configure successful"
    else
      echo "Error: cmake configure failed"
      exit 1;
    fi
  fi

  # configure
  if [ -f ./configure ]; then
    if ./configure --prefix=$INSTALL_DIR $CONFIGURE_ARGS; then
      echo "configure successful"
    else
      echo "Error: ./configure failed"
      exit 1;
    fi
  fi

  # install in custom prefix
  if make && make install; then
    echo "make && make install successful"
  else
    echo "Error: make && make install failed"
    exit 1;
  fi

  # exit and remove src/build dir
  if [ "$CMAKE_ARGS" != "" ]; then
    cd ..
  fi
  cd ..
  rm -rf $PRODUCT_DIR
}

if [ ! -f $CACHE_FILE ]; then
  build "libde265" "${LIB_DE265_VERSION}" "https://github.com/strukturag/libde265/releases/download/v${LIB_DE265_VERSION}" \
        "--disable-dec265 --disable-sherlock265" ".."
  build "libheif" "${LIB_HEIF_VERSION}" "https://github.com/strukturag/libheif/releases/download/v${LIB_HEIF_VERSION}" \
        "" "-DWITH_EXAMPLES=OFF --preset=release-noplugins .."
  build "libwebp" "${LIB_WEBP_VERSION}" "https://storage.googleapis.com/downloads.webmproject.org/releases/webp"
  build "ImageMagick" $IMAGE_MAGICK_VERSION "https://download.imagemagick.org/archive/releases" \
        "--with-webp --with-tiff --with-png --with-heic"

  # cleanup lib files
  cd $INSTALL_DIR
  find . -type f \( -name "*.a" -or -name "*.la" \) -delete
  rm -rf lib/pkgconfig
  rm -rf lib/cmake

  # cache for future deploys
  echo "-----> Caching ImageMagick installation"
  cd $VENDOR_DIR
  REL_INSTALL_DIR="imagemagick"
  tar czf $REL_INSTALL_DIR.tar.gz $REL_INSTALL_DIR

  if [ ! -d $CACHE_DIR ]; then
    mkdir -p $CACHE_DIR
  fi

  mv $REL_INSTALL_DIR.tar.gz $CACHE_FILE

else
  # cache exists, extract it
  echo "-----> Extracting ImageMagick $CACHE_FILE => $VENDOR_DIR"
  mkdir -p $VENDOR_DIR
  tar xzf $CACHE_FILE -C $VENDOR_DIR
fi

echo "-----> Writing policy file"
cat > $INSTALL_DIR/policy.xml <<EOF
<policymap>
  <policy domain="coder" rights="none" pattern="EPHEMERAL" />
  <policy domain="coder" rights="none" pattern="HTTPS" />
  <policy domain="coder" rights="none" pattern="MVG" />
  <policy domain="coder" rights="none" pattern="MSL" />
</policymap>
EOF

# update PATH and LD_LIBRARY_PATH
echo "-----> Updating environment variables"
PROFILE_PATH="$BUILD_DIR/.profile.d/imagemagick.sh"
ACTUAL_INSTALL_PATH="$HOME/vendor/imagemagick"
mkdir -p $(dirname $PROFILE_PATH)
echo "export PATH=$ACTUAL_INSTALL_PATH/bin:\$PATH" >> $PROFILE_PATH
echo "export LD_LIBRARY_PATH=$ACTUAL_INSTALL_PATH/lib:\$LD_LIBRARY_PATH:/usr/local/lib" >> $PROFILE_PATH
echo "export MAGICK_CONFIGURE_PATH=$ACTUAL_INSTALL_PATH" >> $PROFILE_PATH
echo "-----> Done updating environment variables. All set for ImageMagick."
